// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enrico5b1b4/tbwrap (interfaces: TeleBot)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	telebot "gopkg.in/tucnak/telebot.v2"
)

// MockTeleBot is a mock of TeleBot interface
type MockTeleBot struct {
	ctrl     *gomock.Controller
	recorder *MockTeleBotMockRecorder
}

// MockTeleBotMockRecorder is the mock recorder for MockTeleBot
type MockTeleBotMockRecorder struct {
	mock *MockTeleBot
}

// NewMockTeleBot creates a new mock instance
func NewMockTeleBot(ctrl *gomock.Controller) *MockTeleBot {
	mock := &MockTeleBot{ctrl: ctrl}
	mock.recorder = &MockTeleBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTeleBot) EXPECT() *MockTeleBotMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockTeleBot) Handle(arg0, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0, arg1)
}

// Handle indicates an expected call of Handle
func (mr *MockTeleBotMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockTeleBot)(nil).Handle), arg0, arg1)
}

// Respond mocks base method
func (m *MockTeleBot) Respond(arg0 *telebot.Callback, arg1 ...*telebot.CallbackResponse) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Respond", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond
func (mr *MockTeleBotMockRecorder) Respond(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockTeleBot)(nil).Respond), varargs...)
}

// Send mocks base method
func (m *MockTeleBot) Send(arg0 telebot.Recipient, arg1 interface{}, arg2 ...interface{}) (*telebot.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*telebot.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockTeleBotMockRecorder) Send(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTeleBot)(nil).Send), varargs...)
}

// Start mocks base method
func (m *MockTeleBot) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockTeleBotMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTeleBot)(nil).Start))
}
